devtools::install_github("DataWookie/flipsideR")
library(flipsideR)
OZL = getOptionChain("OZL", "ASX")
symbol = "OZL"
URLASX = 'http://www.asx.com.au/asx/markets/optionPrices.do?by=underlyingCode&underlyingCode=%s&expiryDate=&optionType=B'
url = sprintf(URLASX, symbol)
html <- read_html(url)
library(rvest)
html <- read_html(url)
url
html <- html %>% html_nodes("table.options") %>% html_table(header = TRUE)
html
html <- html %>% html_nodes("#optionstable") %>% html_table(header = TRUE)
html <- html %>% html_node("#optionstable") %>% html_table(header = TRUE)
html <- read_html(url)
html %>% html_node("#optionstable")
html
html
url
html <- read_html(url)
html
x <- 3;
?saveRDS
install.packages("TSP")
data(USCA50)
library(TSP)
data(USCA50)
?USCA50
source('~/Downloads/tsp.R', echo=TRUE)
solution
solution = solve_TSP(USCA50, method = METHOD)
solution
tour_length(solution)
cat(sprintf("%19s -> tour length = %d\n", METHOD, tour_length(solution))
)
source('~/Downloads/tsp.R', echo=TRUE)
?solve_TSP
source('~/Downloads/tsp.R', echo=TRUE)
source('~/Downloads/tsp.R', echo=TRUE)
library(help = TSP)
?tour_length
USCA312
USCA312[1,1]
?TSP
print(USCA312)
as.matrix(USCA312)
370 * 1.6
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
length(cross)
source('~/.active-rstudio-document', echo=TRUE)
?runif
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(bookdown)
devtools::install_github("rstudio/addinexamples", type = "source")
bookdown:::serve_book()
install.packages("knitr")
install.packages("knitr")
install.packages("blogdown")
bookdown:::serve_book()
devtools::install_github('rstudio/blogdown')
blogdown::install_hugo()
bookdown:::serve_book()
bookdown:::serve_book()
library(httr)
suppressMessages(library(rvest))
library(stringr)
suppressMessages(library(readr))
library(methods)
library(optparse)
library(httr)
suppressMessages(library(rvest))
library(stringr)
suppressMessages(library(readr))
library(methods)
library(optparse)
RACEID=1800
DISTANCE=10
#
RECORDS = 200
URL = sprintf("http://www.championtravel.co.za/results/index.php?File=results_search.php&DataID=%d&Show=SearchResults", RACEID)
get.records <- function(index) {
response = POST(URL,
body = list(
SearchString = "",
SearchField = "Name",
Distance = DISTANCE,
Category = "All",
SexM = "Sel",
SexW = "Sel",
FromPosition = (index - 1) * RECORDS + 1,
Batch = "",
ShowRecords = RECORDS,
submit = "Go Get It!"
))
html = read_html(content(response, "text", encoding = "ISO-8859-1"))
results = html %>% html_nodes(xpath = '//table//table//table[2]') %>% html_table(header = TRUE) %>% .[[1]]
# Previous page had RECORDS results but no Next button.
#
if (nrow(results) == 0) return(NULL)
race_header = html %>% html_nodes(".headerfont") %>% html_text() %>% sub("Results for: ", "", .)
#
race_matches = str_match(race_header, "(.*) \\((.*) - (.*)\\)")[1,]
#
race_name = race_matches[2]
race_place = race_matches[3]
race_date = race_matches[4]
#
# Fix date format.
#
race_date = as.Date(race_date, "%d/%m/%Y")
results$Race = race_name
results$Date = race_date
results$Distance = DISTANCE
names(results) <- sub("Club.*", "Club", names(results))
results
}
results.list <- list()
#
index = 1
#
while (TRUE) {
cat("Getting batch ", index, ".\n", sep = "")
results <- get.records(index)
#
if(is.null(results)) break
results.list[[index]] <- results
if (nrow(results.list[[index]]) < RECORDS) break
index <- index + 1
}
#
results = do.call(rbind, results.list)
write_delim(results, sprintf("championchip-results-raceid-%d-%d.csv", RACEID, DISTANCE), delim = ";")
DISTANCE=21
URL = sprintf("http://www.championtravel.co.za/results/index.php?File=results_search.php&DataID=%d&Show=SearchResults", RACEID)
get.records <- function(index) {
response = POST(URL,
body = list(
SearchString = "",
SearchField = "Name",
Distance = DISTANCE,
Category = "All",
SexM = "Sel",
SexW = "Sel",
FromPosition = (index - 1) * RECORDS + 1,
Batch = "",
ShowRecords = RECORDS,
submit = "Go Get It!"
))
html = read_html(content(response, "text", encoding = "ISO-8859-1"))
results = html %>% html_nodes(xpath = '//table//table//table[2]') %>% html_table(header = TRUE) %>% .[[1]]
# Previous page had RECORDS results but no Next button.
#
if (nrow(results) == 0) return(NULL)
race_header = html %>% html_nodes(".headerfont") %>% html_text() %>% sub("Results for: ", "", .)
#
race_matches = str_match(race_header, "(.*) \\((.*) - (.*)\\)")[1,]
#
race_name = race_matches[2]
race_place = race_matches[3]
race_date = race_matches[4]
#
# Fix date format.
#
race_date = as.Date(race_date, "%d/%m/%Y")
results$Race = race_name
results$Date = race_date
results$Distance = DISTANCE
names(results) <- sub("Club.*", "Club", names(results))
results
}
results.list <- list()
#
index = 1
#
while (TRUE) {
cat("Getting batch ", index, ".\n", sep = "")
results <- get.records(index)
#
if(is.null(results)) break
results.list[[index]] <- results
if (nrow(results.list[[index]]) < RECORDS) break
index <- index + 1
}
#
results = do.call(rbind, results.list)
write_delim(results, sprintf("championchip-results-raceid-%d-%d.csv", RACEID, DISTANCE), delim = ";")
DISTANCE=42
URL = sprintf("http://www.championtravel.co.za/results/index.php?File=results_search.php&DataID=%d&Show=SearchResults", RACEID)
get.records <- function(index) {
response = POST(URL,
body = list(
SearchString = "",
SearchField = "Name",
Distance = DISTANCE,
Category = "All",
SexM = "Sel",
SexW = "Sel",
FromPosition = (index - 1) * RECORDS + 1,
Batch = "",
ShowRecords = RECORDS,
submit = "Go Get It!"
))
html = read_html(content(response, "text", encoding = "ISO-8859-1"))
results = html %>% html_nodes(xpath = '//table//table//table[2]') %>% html_table(header = TRUE) %>% .[[1]]
# Previous page had RECORDS results but no Next button.
#
if (nrow(results) == 0) return(NULL)
race_header = html %>% html_nodes(".headerfont") %>% html_text() %>% sub("Results for: ", "", .)
#
race_matches = str_match(race_header, "(.*) \\((.*) - (.*)\\)")[1,]
#
race_name = race_matches[2]
race_place = race_matches[3]
race_date = race_matches[4]
#
# Fix date format.
#
race_date = as.Date(race_date, "%d/%m/%Y")
results$Race = race_name
results$Date = race_date
results$Distance = DISTANCE
names(results) <- sub("Club.*", "Club", names(results))
results
}
results.list <- list()
#
index = 1
#
while (TRUE) {
cat("Getting batch ", index, ".\n", sep = "")
results <- get.records(index)
#
if(is.null(results)) break
results.list[[index]] <- results
if (nrow(results.list[[index]]) < RECORDS) break
index <- index + 1
}
#
results = do.call(rbind, results.list)
write_delim(results, sprintf("championchip-results-raceid-%d-%d.csv", RACEID, DISTANCE), delim = ";")
getwd()
source('~/proj/Z-312-new-training/data/nobel/prepare-tables.R', echo=TRUE)
setwd("~/proj/Z-312-new-training/data/nobel")
source('~/proj/Z-312-new-training/data/nobel/prepare-tables.R', echo=TRUE)
laureate$sex
getwd()
